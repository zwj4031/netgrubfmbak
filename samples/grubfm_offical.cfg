# Grub2-FileManager
# Copyright (C) 2016,2017,2018  A1ive.
#
# Grub2-FileManager is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grub2-FileManager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Grub2-FileManager.  If not, see <http://www.gnu.org/licenses/>.

function grubfm_init {
	insmod loopback;
	insmod probe;
	insmod progress;
	insmod regexp;
	set debug= ;
	set enable_progress_indicator=0;
	set grub_exe="/boot/grub/grub.exe";
	set grub_fm="/boot/grub/grubfm.cfg";
	set grub_ipxe="/boot/grub/ipxe.lkrn";
	set grub_memdisk="/boot/grub/memdisk";
	set grub_wimboot="/boot/grub/wimboot";
	set pager=0;
}

# grubfm_main PATH
function grubfm_main {
	if test -z "${1}"; then
		for device in (*); do
			if test -d "${device}"; then
				probe --set=fs -f "${device}";
				probe --set=label -l "${device}";
				if regexp 'loop' "${device}"; then
					continue;
				elif test "$fs" = "udf" -o "$fs" = "iso9660"; then
					icon="iso";
				elif test "${device}" = "(memdisk)" -o "${device}" = "(proc)"; then
					continue;
				else
					icon="hdd";
				fi;
				menuentry "${device} [$fs] $label" "${device}" --class $icon{
					set grub_path="$2";
					set grub_load="";
					export grub_path;
					configfile ${grub_fm};
				}
				unset label;
				unset fs;
			fi;
		done;
	else
		set grub_path="${1}";
		set default=1;
		menuentry ".." --class go-previous{
			if ! regexp --set=1:grub_path '(^.*)/.*$' "${grub_path}"; then
				set grub_path="";
			fi
			set grub_load="";
			export grub_path;
			configfile ${grub_fm};
		}
		for item in ${grub_path}/*; do
			regexp --set=1:name '.*/(.*)$' "${item}";
			if test -d "${item}"; then
				menuentry "[${name}]" "${item}" --class dir{
					set grub_path="$2";
					set grub_load="";
					export grub_path;
					configfile ${grub_fm};
				}
			elif test -f "${item}"; then
				menuentry "${name}" "${item}" --class file{
					set grub_file="$2";
					set grub_load="grubfm_open";
					export grub_file;
					export grub_path;
					export grub_load;
					configfile ${grub_fm};
				}
			else
				continue;
			fi;
		done;
	fi;
}
# grubfm_open FILE
function grubfm_open {
	unset name;
	unset name_ext;
	set grub_file="${1}";
	set grub_load="";
	regexp --set=1:name '.*/(.*)$' "${grub_file}";
	regexp --set=1:name_ext '^.*\.(.*$)' "${grub_file}";
	set default=1;
	menuentry "返回" --class go-previous{
		set grub_load="";
		export grub_path;
		configfile ${grub_fm};
	}
	# cfg efi ima/img iso wim ipxe
	if regexp '^[cC][fF][gG]$' "${name_ext}"; then
		menuentry "加载GRUB2菜单" --class cfg{
			regexp --set=1:root '^\(([0-9a-zA-Z,]+)\).*$' "${grub_file}";
			configfile ${grub_file};
		}
	elif regexp '^[eE][fF][iI]$' "${name_ext}"; then
		if [ "$grub_platform" = "efi" ]; then
			menuentry "运行EFI程序" --class uefi{
				set enable_progress_indicator=1;
				regexp --set=1:root '^\(([0-9a-zA-Z,]+)\).*$' "${grub_file}";
				chainloader ${grub_file};
			}
		fi;
	elif regexp '^[iI][mM][aAgG]$' "${name_ext}"; then
		if [ "$grub_platform" = "pc" ]; then
			menuentry "仿真启动软盘镜像 (grub.exe)" --class img{
				set enable_progress_indicator=1;
                set g4d_cmd="map --mem (rd)+1 (fd0);map --hook;rootnoverify (fd0);chainloader +1"
				linux16 ${grub_exe} --config-file=$g4d_cmd;
				initrd16 ${grub_file};
			}
            menuentry "仿真启动软盘镜像 (memdisk)" --class img{
				set enable_progress_indicator=1;
				linux16 ${grub_memdisk} floppy raw;
				initrd16 ${grub_file};
			}
            menuentry "仿真启动硬盘镜像 (grub.exe)" --class img{
				set enable_progress_indicator=1;
				set g4d_cmd="map --mem (rd)+1 (hd-1);map --hook;rootnoverify (hd-1);chainloader +1"
				linux16 ${grub_exe} --config-file=$g4d_cmd;
				initrd16 ${grub_file};
			}
			menuentry "仿真启动硬盘镜像 (memdisk)" --class img{
				set enable_progress_indicator=1;
				linux16 ${grub_memdisk} harddisk raw;
				initrd16 ${grub_file};
			}
		fi;
	elif regexp '^[iI][sS][oO]$' "${name_ext}"; then
		loopback loop ${grub_file};
		if test -f (loop)/boot/grub/loopback.cfg; then
			menuentry "加载ISO Loopback菜单" --class gnu-linux{
				regexp --set=1:iso_path '(/.*)$' "${grub_file}";
                regexp --set=1:iso_device '^(\([0-9a-zA-Z,]+\))/.*' "${grub_file}";
                probe --set=rootuuid -u "${iso_device}";
				export iso_path;
                export rootuuid;
				set root=loop;
				configfile /boot/grub/loopback.cfg
			}
		fi;
		if [ "$grub_platform" = "pc" ]; then
			menuentry "仿真启动光盘镜像 (grub.exe)" --class iso{
				set enable_progress_indicator=1;
				set g4d_cmd="map --mem (rd)+1 (0xff);map --hook;chainloader (0xff)"
				linux16 ${grub_exe} --config-file=$g4d_cmd;
				initrd16 ${grub_file};
			}
            menuentry "仿真启动光盘镜像 (memdisk)" --class iso{
				set enable_progress_indicator=1;
				linux16 ${grub_memdisk} iso raw;
				initrd16 ${grub_file};
			}
		fi;
	elif regexp '^[wW][iI][mM]$' "${name_ext}"; then
		if [ "$grub_platform" = "pc" ]; then
			menuentry "启动 NT6 WIM" --class wim{
				set enable_progress_indicator=1;
				loopback wimboot ${grub_wimboot};
				linux16 (wimboot)/wimboot gui;
				initrd16 newc:bootmgr:(wimboot)/bootmgr \
					newc:bcd:(wimboot)/bcd \
					newc:boot.sdi:(wimboot)/boot.sdi \
					newc:boot.wim:${grub_file};
			}
		fi;
	elif regexp '^[iI][pP][xX][eE]$' "${name_ext}"; then
		if [ "$grub_platform" = "pc" ]; then
			menuentry "加载iPXE菜单" --class net{
				set enable_progress_indicator=1;
				linux16 ${grub_ipxe};
				initrd16 ${grub_file};
			}
		fi;
	elif file --is-x86-multiboot "${grub_file}"; then
		menuentry "启动Multiboot内核"  --class exe{
			multiboot "${grub_file}";
		}
	elif file --is-x86-multiboot2 "${grub_file}"; then
		menuentry "启动Multiboot2内核"  --class exe{
			multiboot2 "${grub_file}";
		}
	elif file --is-x86-linux "${grub_file}"; then
		menuentry "启动Linux内核"  --class exe{
			linux "${grub_file}";
		}
	fi;
}

grubfm_init;
if [ "${grub_load}" = "grubfm_open" ]; then
	grubfm_open "${grub_file}";
else
	grubfm_main "${grub_path}";
fi;
